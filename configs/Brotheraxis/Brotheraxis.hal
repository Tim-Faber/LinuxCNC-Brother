# Generated by PNCconf at Tue Mar  9 09:10:54 2021
# Using LinuxCNC version:  2.9.0~pre0
# If you make changes to this file, they will be
# overwritten when you run PNCconf again

loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS num_dio=[EMCMOT]EMCMOT_MAX_DIO
loadrt hostmot2
loadrt hm2_eth board_ip="10.10.10.10" config=" num_encoders=6 num_pwmgens=6 num_stepgens=0 sserial_port_0=00xxxxxx" 
setp    [HMOT](CARD0).watchdog.timeout_ns 5000000
loadrt pid names=pid.x,pid.y,pid.z,pid.s,pid.so
loadrt timedelay count=3
loadrt orient
loadrt mux2 count=2
loadrt or2 count=2
loadrt near
loadrt and2
loadrt mux_generic config=bb8

loadrt ilowpass
loadrt mux16 names=jogincr
addf jogincr                  servo-thread

addf [HMOT](CARD0).read       servo-thread
addf motion-command-handler   servo-thread
addf motion-controller        servo-thread
addf pid.x.do-pid-calcs       servo-thread
addf pid.y.do-pid-calcs       servo-thread
addf pid.z.do-pid-calcs       servo-thread
addf pid.s.do-pid-calcs       servo-thread
addf pid.so.do-pid-calcs 	  servo-thread 
addf [HMOT](CARD0).write      servo-thread
addf timedelay.0 			  servo-thread
addf timedelay.1 			  servo-thread
addf timedelay.2			  servo-thread
addf orient.0 				  servo-thread
addf mux2.0 				  servo-thread
addf mux2.1		  			  servo-thread
addf mux-gen.00			  servo-thread

addf ilowpass.0               servo-thread


addf or2.0					  servo-thread
addf or2.1					  servo-thread
addf near.0					  servo-thread
addf and2.0					  servo-thread

#Setting time delays
setp timedelay.0.on-delay 0.5
setp timedelay.0.off-delay 0
setp timedelay.1.on-delay 1
setp timedelay.1.off-delay 0.5
setp timedelay.2.on-delay 0
setp timedelay.2.off-delay 0.5



#  ---machine enable---
net machine-is-enabled  => [HMOT](CARD0).ssr.00.out-03 
net delay0_sig timedelay.0.out => timedelay.1.in
net delay1_sig timedelay.1.out => [HMOT](CARD0).ssr.00.out-02 

# switch atc ranges from toolchange subroutine
net z-limit-select motion.digital-out-01 => mux2.1.sel mux-gen.00.sel-bit-00



# spindle index pulse wired to motion controller
net spindle-index-enable => motion.digital-in-01

# atc-home
net atc-home <= motion.digital-in-16 [HMOT](CARD0).inmux.00.input-06-not
#net atc-overtravel mux-gen.00.in-bit-01 [HMOT](CARD0).gpio.044.in_not
# atc-range
net atc-range <= motion.digital-in-17 [HMOT](CARD0).inmux.00.input-14-not

# atc-run
net atc-run <= motion.digital-out-03 [HMOT](CARD0).ssr.00.out-00

# atc-direction
net atc-direction <= motion.digital-out-04 [HMOT](CARD0).ssr.00.out-01

#atc-dec
#net atc-dec <= motion.digital-in-10 
#net atc-enc-5 motion.digital-in-15 <= [HMOT](CARD0).inmux.00.input-11
net atc-dec <= motion.digital-in-10 [HMOT](CARD0).inmux.00.input-11


# encoder atc
net atc-enc-1 motion.digital-in-11 <= [HMOT](CARD0).inmux.00.input-07
net atc-enc-2 motion.digital-in-12 <= [HMOT](CARD0).inmux.00.input-08
net atc-enc-3 motion.digital-in-13 <= [HMOT](CARD0).inmux.00.input-09
net atc-enc-4 motion.digital-in-14 <= [HMOT](CARD0).inmux.00.input-10

# external input signals


# --- MIN-HOME-X ---
net min-home-x     <=  [HMOT](CARD0).inmux.00.input-12-not

# --- MIN-HOME-Y ---
net min-home-y     <=  [HMOT](CARD0).inmux.00.input-13-not

# --- MAX-HOME-Z ---
net max-home-z-1     <=  [HMOT](CARD0).inmux.00.input-15-not mux-gen.00.in-bit-00
net max-home-z mux-gen.00.out-bit


# Global PWM setup

setp [HMOT](CARD0).pwmgen.pwm_frequency 48000


#----feed override

setp halui.feed-override.count-enable true
setp halui.feed-override.direct-value false
setp halui.feed-override.scale 0.05
net feedoverride-incr   =>  halui.feed-override.counts [HMOT](CARD0).inmux.00.enc1-count

setp halui.rapid-override.count-enable true
setp halui.rapid-override.direct-value false
setp halui.rapid-override.scale 0.05
net rapidoverride-incr   =>  halui.rapid-override.counts [HMOT](CARD0).inmux.00.enc2-count


# --- MPG JOG WHEEL----

# ilowpass filter
setp ilowpass.0.scale 100
setp ilowpass.0.gain  0.05

# Setup Jog Pendant on each axis
setp axis.x.jog-vel-mode 1
setp axis.y.jog-vel-mode 1
setp axis.z.jog-vel-mode 1

# --- JOG-INCR-A ---
net jog-incr-a     <=  [HMOT](CARD0).gpio.040.in_not

# --- JOG-INCR-B ---
net jog-incr-b     <=  [HMOT](CARD0).gpio.041.in_not

# --- JOG-INCR-C ---
net jog-incr-c     <=  [HMOT](CARD0).gpio.042.in_not


net jog-incr-a           =>  jogincr.sel0
net jog-incr-b           =>  jogincr.sel1
net jog-incr-c           =>  jogincr.sel2
net jog-incr-d           =>  jogincr.sel3
net jog-scale    <=  jogincr.out-f
    setp jogincr.debounce-time      0.200000
    setp jogincr.use-graycode      False
    setp jogincr.suppress-no-input True
    setp jogincr.in00          0.000000
    setp jogincr.in01          0.00005
    setp jogincr.in02          0.0001
    setp jogincr.in03          0.000000
    setp jogincr.in04          0.001






net axis-select-x <= [HMOT](CARD0).gpio.034.in_not
net axis-select-y <= [HMOT](CARD0).gpio.035.in_not
net axis-select-z <= [HMOT](CARD0).gpio.036.in_not
#net axis-select-a <= [HMOT](CARD0).gpio.037.in_not
#net axis-select-5 <= 
#net axis-select-6 <= 

net axis-select-x => axis.x.jog-enable joint.0.jog-enable
net axis-select-y => axis.y.jog-enable joint.1.jog-enable
net axis-select-z => axis.z.jog-enable joint.2.jog-enable
#net axis-select-a => axis.a.jog-enable joint.3.jog-enable

# Encoder counts
net jog-counter <=  [HMOT](CARD0).inmux.00.enc0-count
net jog-counter => ilowpass.0.in
net smooth-counter <= ilowpass.0.out
net smooth-counter => axis.x.jog-counts joint.0.jog-counts
net smooth-counter => axis.y.jog-counts joint.1.jog-counts
net smooth-counter => axis.z.jog-counts joint.2.jog-counts
#net smooth-counter => axis.a.jog-counts joint.3.jog-counts

net jog-scale => axis.x.jog-scale joint.0.jog-scale
net jog-scale => axis.y.jog-scale joint.1.jog-scale
net jog-scale => axis.z.jog-scale joint.2.jog-scale
#net jog-scale => axis.a.jog-scale joint.3.jog-scale

#*******************
#  AXIS X JOINT 0
#*******************

setp   pid.x.Pgain     [JOINT_0]P
setp   pid.x.Igain     [JOINT_0]I
setp   pid.x.Dgain     [JOINT_0]D
setp   pid.x.bias      [JOINT_0]BIAS
setp   pid.x.FF0       [JOINT_0]FF0
setp   pid.x.FF1       [JOINT_0]FF1
setp   pid.x.FF2       [JOINT_0]FF2
setp   pid.x.deadband  [JOINT_0]DEADBAND
setp   pid.x.maxoutput [JOINT_0]MAX_OUTPUT
setp   pid.x.error-previous-target true

net x-index-enable  <=> pid.x.index-enable
net x-enable        =>  pid.x.enable
net x-pos-cmd       =>  pid.x.command
net x-pos-fb        =>  pid.x.feedback
net x-output        <=  pid.x.output

# ---PWM Generator signals/setup---
setp   [HMOT](CARD0).pwmgen.00.output-type 1 #PWM pin0
setp   [HMOT](CARD0).pwmgen.00.offset-mode 1 # offset mode so 50% = 0
setp   [HMOT](CARD0).pwmgen.00.scale   [JOINT_0]OUTPUT_SCALE 

net x-output     => [HMOT](CARD0).pwmgen.00.value
net x-pos-cmd    <= joint.0.motor-pos-cmd
net x-enable     <= joint.0.amp-enable-out timedelay.0.in
net delay0_sig timedelay.0.out => [HMOT](CARD0).pwmgen.00.enable

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.00.counter-mode 0
setp    [HMOT](CARD0).encoder.00.filter 1
setp    [HMOT](CARD0).encoder.00.index-invert 0
setp    [HMOT](CARD0).encoder.00.index-mask 0
setp    [HMOT](CARD0).encoder.00.index-mask-invert 0
setp    [HMOT](CARD0).encoder.00.scale  [JOINT_0]ENCODER_SCALE

net x-pos-fb               <=  [HMOT](CARD0).encoder.00.position
net x-vel-fb               <=  [HMOT](CARD0).encoder.00.velocity
net x-pos-fb               =>  joint.0.motor-pos-fb
net x-index-enable    joint.0.index-enable  <=>  [HMOT](CARD0).encoder.00.index-enable
net x-pos-rawcounts        <=  [HMOT](CARD0).encoder.00.rawcounts

# ---setup home / limit switch signals---

net min-home-x     =>  joint.0.home-sw-in
net min-home-x     =>  joint.0.neg-lim-sw-in
net min-home-x     =>  joint.0.pos-lim-sw-in



#*******************
#  AXIS Y JOINT 1
#*******************

setp   pid.y.Pgain     [JOINT_1]P
setp   pid.y.Igain     [JOINT_1]I
setp   pid.y.Dgain     [JOINT_1]D
setp   pid.y.bias      [JOINT_1]BIAS
setp   pid.y.FF0       [JOINT_1]FF0
setp   pid.y.FF1       [JOINT_1]FF1
setp   pid.y.FF2       [JOINT_1]FF2
setp   pid.y.deadband  [JOINT_1]DEADBAND
setp   pid.y.maxoutput [JOINT_1]MAX_OUTPUT
setp   pid.y.error-previous-target true

net y-index-enable  <=> pid.y.index-enable
net y-enable        =>  pid.y.enable
net y-pos-cmd       =>  pid.y.command
net y-pos-fb        =>  pid.y.feedback
net y-output        <=  pid.y.output

# ---PWM Generator signals/setup---

setp   [HMOT](CARD0).pwmgen.01.output-type 1 #PWM pin0
setp   [HMOT](CARD0).pwmgen.01.offset-mode 1 # offset mode so 50% = 0
setp   [HMOT](CARD0).pwmgen.01.scale   [JOINT_1]OUTPUT_SCALE

net y-output     => [HMOT](CARD0).pwmgen.01.value
net y-pos-cmd    <= joint.1.motor-pos-cmd
net y-enable     <= joint.1.amp-enable-out
net delay0_sig [HMOT](CARD0).pwmgen.01.enable

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.01.counter-mode 0
setp    [HMOT](CARD0).encoder.01.filter 1
setp    [HMOT](CARD0).encoder.01.index-invert 0
setp    [HMOT](CARD0).encoder.01.index-mask 0
setp    [HMOT](CARD0).encoder.01.index-mask-invert 0
setp    [HMOT](CARD0).encoder.01.scale  [JOINT_1]ENCODER_SCALE

net y-pos-fb               <=  [HMOT](CARD0).encoder.01.position
net y-vel-fb               <=  [HMOT](CARD0).encoder.01.velocity
net y-pos-fb               =>  joint.1.motor-pos-fb
net y-index-enable    joint.1.index-enable  <=>  [HMOT](CARD0).encoder.01.index-enable
net y-pos-rawcounts        <=  [HMOT](CARD0).encoder.01.rawcounts
# ---setup home / limit switch signals---

net min-home-y     =>  joint.1.home-sw-in
net min-home-y     =>  joint.1.neg-lim-sw-in
net min-home-y     =>  joint.1.pos-lim-sw-in

#*******************
#  AXIS Z JOINT 2
#*******************

setp   pid.z.Pgain     [JOINT_2]P
setp   pid.z.Igain     [JOINT_2]I
setp   pid.z.Dgain     [JOINT_2]D
setp   pid.z.bias      [JOINT_2]BIAS
setp   pid.z.FF0       [JOINT_2]FF0
setp   pid.z.FF1       [JOINT_2]FF1
setp   pid.z.FF2       [JOINT_2]FF2
setp   pid.z.deadband  [JOINT_2]DEADBAND
setp   pid.z.maxoutput [JOINT_2]MAX_OUTPUT
setp   pid.z.error-previous-target true

net z-index-enable  <=> pid.z.index-enable
net z-enable        =>  pid.z.enable
net z-pos-cmd       =>  pid.z.command
net z-pos-fb        =>  pid.z.feedback
net z-output        <=  pid.z.output

# ---PWM Generator signals/setup---

setp   [HMOT](CARD0).pwmgen.02.output-type 1 #PWM pin0
setp   [HMOT](CARD0).pwmgen.02.offset-mode 1 # offset mode so 50% = 0
setp   [HMOT](CARD0).pwmgen.02.scale   [JOINT_2]OUTPUT_SCALE

net z-output     => [HMOT](CARD0).pwmgen.02.value
net z-pos-cmd    <= joint.2.motor-pos-cmd
net z-enable     <= joint.2.amp-enable-out
net delay0_sig [HMOT](CARD0).pwmgen.02.enable 

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.02.counter-mode 0
setp    [HMOT](CARD0).encoder.02.filter 1
setp    [HMOT](CARD0).encoder.02.index-invert 0
setp    [HMOT](CARD0).encoder.02.index-mask 0
setp    [HMOT](CARD0).encoder.02.index-mask-invert 0
setp    [HMOT](CARD0).encoder.02.scale  [JOINT_2]ENCODER_SCALE

net z-pos-fb               <=  [HMOT](CARD0).encoder.02.position
net z-vel-fb               <=  [HMOT](CARD0).encoder.02.velocity
net z-pos-fb               =>  joint.2.motor-pos-fb
net z-index-enable    joint.2.index-enable  <=>  [HMOT](CARD0).encoder.02.index-enable 
net z-pos-rawcounts        <=  [HMOT](CARD0).encoder.02.rawcounts

# ---setup home / limit switch signals---


# switch z-axis soft limits
setp mux2.1.in0 [JOINT_2]MAX_LIMIT
setp mux2.1.in1 [JOINT_2]MAX_LIMIT_ATC
net z-limit-out <= mux2.1.out
# ini.2.max_limit is connectedd in custom_postgui.hal



net max-home-z   =>  joint.2.home-sw-in
net max-home-z     =>  joint.2.neg-lim-sw-in
net max-home-z      =>  joint.2.pos-lim-sw-in





#*******************
#  SPINDLE
#*******************

setp   pid.s.Pgain     [SPINDLE_0]P
setp   pid.s.Igain     [SPINDLE_0]I
setp   pid.s.Dgain     [SPINDLE_0]D
setp   pid.s.bias      [SPINDLE_0]BIAS
setp   pid.s.FF0       [SPINDLE_0]FF0
setp   pid.s.FF1       [SPINDLE_0]FF1
setp   pid.s.FF2       [SPINDLE_0]FF2
setp   pid.s.deadband  [SPINDLE_0]DEADBAND
setp   pid.s.maxoutput [SPINDLE_0]MAX_OUTPUT
setp   pid.s.error-previous-target true

setp   pid.so.Pgain     [SPINDLE_ORIENT]P
setp   pid.so.Igain     [SPINDLE_ORIENT]I
setp   pid.so.Dgain     [SPINDLE_ORIENT]D
setp   pid.so.bias      [SPINDLE_ORIENT]BIAS
setp   pid.so.FF0       [SPINDLE_ORIENT]FF0
setp   pid.so.FF1       [SPINDLE_ORIENT]FF1
setp   pid.so.FF2       [SPINDLE_ORIENT]FF2
setp   pid.so.deadband  [SPINDLE_ORIENT]DEADBAND
setp   pid.so.maxoutput [SPINDLE_ORIENT]MAX_OUTPUT
setp   pid.so.error-previous-target true

net spindle-index-enable  <=> pid.so.index-enable pid.s.index-enable 



net spindle-vel 	    pid.s.feedback [HMOT](CARD0).encoder.05.velocity
net spindle-vel-cmd 	spindle.0.speed-out pid.s.command
net spindle-vel-pid 	pid.s.output mux2.0.in0

net spindle-pos 	    pid.so.feedback orient.0.position [HMOT](CARD0).encoder.05.position 
net spindle-pos-cmd 	orient.0.command pid.so.command 
net spindle-angle 	    spindle.0.orient-angle orient.0.angle
net spindle-pos-pid 	pid.so.output mux2.0.in1



net orient-mode 	spindle.0.orient orient.0.enable pid.so.enable mux2.0.sel and2.0.in0 or2.0.in0
net velocity-mode	spindle.0.on pid.s.enable timedelay.2.in
net orient-dir		spindle.0.orient-mode orient.0.mode

net spindle-disable	or2.0.in1 timedelay.2.out
net spindle-enable  or2.0.out [HMOT](CARD0).pwmgen.05.enable

net spindle-cmd 	mux2.0.out [HMOT](CARD0).pwmgen.05.value


#home the spindle during first revolution

net spindle-index-enable     <=>  [HMOT](CARD0).encoder.05.index-enable 



#maybe add near here?
net spindle-in-pos 	orient.0.is-oriented spindle.0.is-oriented 


#net spindle-enable        =>  pid.s.enable
#net spindle-vel-cmd-rpm     => pid.s.command
#net spindle-vel-fb-rpm      => pid.s.feedback
#net spindle-output        <=  pid.s.output

# ---PWM Generator signals/setup---

setp   [HMOT](CARD0).pwmgen.05.output-type 1 #PWM pin0
setp   [HMOT](CARD0).pwmgen.05.offset-mode 1 # offset mode so 50% = 0
setp   [HMOT](CARD0).pwmgen.05.scale   [SPINDLE_0]OUTPUT_SCALE

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.05.counter-mode 0
setp    [HMOT](CARD0).encoder.05.filter 1
setp    [HMOT](CARD0).encoder.05.index-invert 0
setp    [HMOT](CARD0).encoder.05.index-mask 0
setp    [HMOT](CARD0).encoder.05.index-mask-invert 0
setp    [HMOT](CARD0).encoder.05.scale  [SPINDLE_0]ENCODER_SCALE

# ---setup spindle control signals---

net spindle-vel-cmd-rps        <=  spindle.0.speed-out-rps
net spindle-vel-cmd-rps-abs    <=  spindle.0.speed-out-rps-abs
#net spindle-vel-cmd-rpm        <=  spindle.0.speed-out
#net spindle-vel-cmd-rpm-abs    <=  spindle.0.speed-out-abs
#net spindle-enable             <=  spindle.0.on
#net spindle-cw                 <=  spindle.0.forward
#net spindle-ccw                <=  spindle.0.reverse
#net spindle-brake              <=  spindle.0.brake
net spindle-pos              =>  spindle.0.revs
net spindle-at-speed           =>  spindle.0.at-speed
#net spindle-vel-fb-rps         =>  spindle.0.speed-in
net spindle-index-enable      <=>  spindle.0.index-enable

# ---Setup spindle at speed signals---

sets spindle-at-speed true
sets spindle-index-enable true 
setp orient.0.tolerance 0.8



#******************************
# connect miscellaneous signals
#******************************

#  ---HALUI signals---

net axis-select-x  halui.axis.x.select
net jog-x-pos      halui.axis.x.plus
net jog-x-neg      halui.axis.x.minus
net jog-x-analog   halui.axis.x.analog
net x-is-homed     halui.joint.0.is-homed
net axis-select-y  halui.axis.y.select
net jog-y-pos      halui.axis.y.plus
net jog-y-neg      halui.axis.y.minus
net jog-y-analog   halui.axis.y.analog
net y-is-homed     halui.joint.1.is-homed
net axis-select-z  halui.axis.z.select
net jog-z-pos      halui.axis.z.plus
net jog-z-neg      halui.axis.z.minus
net jog-z-analog   halui.axis.z.analog
net z-is-homed     halui.joint.2.is-homed
net jog-selected-pos      halui.axis.selected.plus
net jog-selected-neg      halui.axis.selected.minus
net spindle-manual-cw     halui.spindle.0.forward
net spindle-manual-ccw    halui.spindle.0.reverse
net spindle-manual-stop   halui.spindle.0.stop
net machine-is-on         halui.machine.is-on
net jog-speed             halui.axis.jog-speed
net MDI-mode              halui.mode.is-mdi

#  ---coolant signals---

net coolant-mist      <=  iocontrol.0.coolant-mist
net coolant-flood     <=  iocontrol.0.coolant-flood

#  ---probe signal---
net probe-in	 <= 		[HMOT](CARD0).gpio.044.in_not
net probe-in     =>  		motion.probe-input

#  ---motion control signals---

net in-position               <=  motion.in-position
net machine-is-enabled        <=  motion.motion-enabled

#  ---digital in / out signals---

#  ---estop signals---

net estop-out-internal     <=  iocontrol.0.user-enable-out or2.1.in1
net estop-out-external  [HMOT](CARD0).gpio.043.in_not or2.1.in0
net estop-out     or2.1.out iocontrol.0.emc-enable-in


#  ---tool change signals---
net tool-prepare-loopback   iocontrol.0.tool-prepare      =>  iocontrol.0.tool-prepared
net tool-is-changed motion.digital-out-00 iocontrol.0.tool-changed

